package views;

import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Arrays;

import models.Constants;

import org.eclipse.jface.action.GroupMarker;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.part.ViewPart;

import resources.Messages;

import com.jchapman.jipsnapman.events.SnapshotEventManager;

import views.widgets.BasicListTable;

import actions.menu.*;
import actions.toolbar.*;

public class 
JIPView 
extends ViewPart 
implements IView
{
	String 			path;
	String 			name;
	String 			port;
	String 			host;
	
	Label 			label;
	BasicListTable 	snapshots_table;
	BasicListTable	log_console_table;
	
	public 
	JIPView() 
	{}
	
	@Override
	public void 
	createPartControl
	(Composite parent) 
	{
		initializeGridLayout(parent);
		initializeLabel(parent);
		
		IActionBars actionBars 	
			= super.getViewSite().getActionBars();
		initializeToolbar(actionBars.getToolBarManager());
		initializeDropDownMenu(actionBars.getMenuManager());
		
		this.snapshots_table 
			= new BasicListTable(parent, Messages.JIP_Snapshot_Table_Title);
		this.snapshots_table.setContents(
			new ArrayList<String>(Arrays.asList( 
				new String[]{ 
					Messages.JIPView_0, Messages.JIPView_1, Messages.JIPView_2, Messages.JIPView_3
				})
			));
	}

	private void 
	initializeGridLayout
	(Composite parent) 
	{
		GridLayout grid_layout 
			= new GridLayout(1, false);
		grid_layout.marginWidth = 4;
		parent.setLayout(grid_layout);
	}
	
	private void 
	initializeLabel
	(Composite parent) 
	{
		this.label 				
			= new Label(parent, SWT.LEFT);
		this.label.setText(Messages.JIP_Default_URL_Label);
		
		GridData grid_data 			
			= new GridData(SWT.FILL,SWT.FILL, true, false);
		grid_data.horizontalSpan 	
			= 1 ;
		this.label.setLayoutData( grid_data );
	}

	private void 
	initializeToolbar
	(IToolBarManager toolBar) 
	{
		SnapshotEventManager snapshot_event_manager
			= new SnapshotEventManager();
		IAction details	
			= new ConfigureAction(this, snapshot_event_manager);
		IAction finish	
			= new FinishAction(snapshot_event_manager);
		IAction start	
			= new StartAction(snapshot_event_manager);
		IAction launch	
			= new LaunchViewerAction();
		
		toolBar.add(details);
		toolBar.add(start);
		toolBar.add(finish);
		toolBar.add(new GroupMarker(Messages.JIPView_4));
		toolBar.add(launch);

	}
	
	private void 
	initializeDropDownMenu
	(IMenuManager dropDownMenu) 
	{
		IAction about		
			= new AboutAction();
		dropDownMenu.add(about);
	}
	
	@Override
	public void 
	setFocus() 
	{}
	
	public void
	refresh()
	{
		label.setText(
			this.name 
			+ Messages.JIPView_5 
			+ this.port 
			+ Messages.JIPView_6 
			+ this.port
			+ Messages.JIPView_7
			+ this.path 
			+ Messages.JIPView_8
		);
		snapshots_table.refresh();
	}

	@Override
	public void 
	modelPropertyChange
	(PropertyChangeEvent evt) 
	{
		switch(evt.getPropertyName()){
		case Constants.PATH_PROPERTY:
			this.path = (String) evt.getNewValue();
			break;
		case "HostProperty":
			this.host = (String) evt.getNewValue();
			break;
		case Constants.NAME_PROPERTY:
			this.name = (String) evt.getNewValue();
			break;
		case "PortProperty":
			this.port = (String) evt.getNewValue();
			break;
		}
		this.refresh();
	}
}
