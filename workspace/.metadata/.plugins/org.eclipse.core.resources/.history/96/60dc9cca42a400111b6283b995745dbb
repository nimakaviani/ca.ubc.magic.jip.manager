package actions.toolbar;

import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.List;

import jipplugin.Activator;
import jipplugin.DetailsDialog;
import jipplugin.IController;
import jipplugin.IModel;
import jipplugin.JIPView;
import jipplugin.Model;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;

import com.jchapman.jipsnapman.models.ISnapshotInfoModel;

public class ConfigureAction 
extends Action 
implements IController
{
	// this should eventually be turned into a "view" that can
	// be in the list of views to be updated
	private List<ISnapshotInfoModel>	registeredModels;
	private List<IView> 				registeredViews;
	
	// basically I am trying to understand the reference's technique for 
	// keeping track of the previous path and displaying it
	public 
	ConfigureAction
	( JIPView jipView )
	{
		registeredModels
			= new ArrayList<ISnapshotInfoModel>();
		registeredViews
			= new ArrayList<Composite>();
		this.setToolTipText("Set the path, name, port, and host to work with.");
		this.setImageDescriptor(Activator.getImageDescriptor("icons/configure.gif"));
		
		Shell shell
			= PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		DetailsDialog dialog = new DetailsDialog(shell);
		
		this.addModel(Activator.getDefault().getModel());
		this.addView(jipView);
		this.addView(dialog);
	}
	
	@Override
	public void run(){
		
		
		if(dialog.open() != InputDialog.OK){
			return;
		}		
		
		//view.setSnapshotDetails("hello", "there", "you", "there");
	}

	@Override
	public void 
	propertyChange
	(PropertyChangeEvent arg0) 
	{
		jipplugin.Model snapshot = Activator.getDefault().getModel();
		// the main view should be updated in response to this
		// for now cheat
		jipView.setSnapshotDetails(
			snapshot.getSnapshotPath(), 
			snapshot.getSnapshotName(), 
			snapshot.getSnapshotPort(),
			snapshot.getSnapshotHost()
		);
	}

	@Override
	public void 
	addModel
	(ISnapshotInfoModel model) 
	{
		
		Activator.getDefault().getModel().addPropertyChangeListener(this);
	}

	@Override
	public void 
	removeModel
	(IModel model) 
	{
	}

	@Override
	public void 
	addView
	(Composite view) 
	{
	}

	@Override
	public void 
	removeView
	(Composite view)
	{
	}
}
