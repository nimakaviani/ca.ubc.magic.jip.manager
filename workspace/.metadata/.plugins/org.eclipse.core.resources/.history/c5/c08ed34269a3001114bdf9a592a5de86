package jipplugin;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.ISizeProvider;
import org.eclipse.ui.part.ViewPart;

import actions.menu.*;
import actions.toolbar.*;

// this will need to be refactored into a proper MVC later
// chances are that will happen automatically as I attempt to mold
// the architecture of the original implementation into the plugin
public class 
JIPView 
extends ViewPart 
implements ISizeProvider
{
	String 			path;
	String 			name;
	String 			port;
	String 			host;
	
	Label 			label;
	SnapshotsList 	snapshots_list;
	
	public 
	JIPView() 
	{}
	
	@Override
	public void 
	createPartControl
	(Composite parent) 
	{
		initializeGridLayout(parent);
		initializeLabel(parent);
		
		IActionBars actionBars 	
			= super.getViewSite().getActionBars();
		initializeToolbar(actionBars.getToolBarManager());
		initializeDropDownMenu(actionBars.getMenuManager());
		
		this.snapshots_list = new SnapshotsList(parent);
		initializeLogConsole(parent);
		SnapshotsTable Table = new SnapshotsTable(parent);
		//System.out.println(this.);
	}

	private void 
	initializeGridLayout
	(Composite parent) 
	{
		GridLayout grid_layout 
			= new GridLayout(1, false);
		grid_layout.marginWidth = 4;
		parent.setLayout(grid_layout);
	}
	
	private void 
	initializeLabel
	(Composite parent) 
	{
		this.label 				
			= new Label(parent, SWT.LEFT);
		this.label.setText("Hello World");
		
		GridData grid_data 			
			= new GridData(SWT.FILL,SWT.FILL, true, false);
		grid_data.horizontalSpan 	
			= 1 ;
		this.label.setLayoutData( grid_data );
	}

	private void 
	initializeToolbar
	(IToolBarManager toolBar) 
	{
		IAction details	= new ConfigureAction(this);
		IAction finish	= new FinishAction();
		IAction start	= new StartAction();
		IAction add		= new AddAction();
		
		toolBar.add(details);
		toolBar.add(start);
		toolBar.add(finish);
		toolBar.add(add);
	}
	
	private void 
	initializeDropDownMenu
	(IMenuManager dropDownMenu) 
	{
		IAction about		
			= new AboutAction();
		dropDownMenu.add(about);
	}
	
	private void 
	initializeLogConsole
	(Composite parent) 
	{
		Text text 
			= new Text( parent, SWT.MULTI | SWT.BORDER |SWT.WRAP );
		text.setLayoutData( new GridData(SWT.FILL, SWT.FILL, true, true) );
		text.setEditable(false);
	}

	@Override
	public void 
	setFocus() 
	{}
	
	public void
	setSnapshotDetails
	( String path, String name, String port, String host )
	{
		this.path = path;
		this.name = name;
		this.port = port;
		this.host = host;
		
		// I wonder when this gets redrawn (?)
		label.setText(this.path + " " + this.name + " " + this.port + " " + this.host);
		snapshots_list.addSnapshot("Haskell");
		snapshots_list.addSnapshot("Lua");
		snapshots_list.refresh(false);
	}

	@Override
	public int 
	getSizeFlags
	(boolean width) 
	{
		return SWT.MAX | SWT.MIN;
	}

	@Override
	public int 
	computePreferredSize
	(boolean width, int availableParallel, int availablePerpendicular, int preferredResult) {
		// TODO Auto-generated method stub
		return preferredResult;
	}
}
