package views;

import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Arrays;

import jipplugin.Activator;


import models.Constants;

import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.ViewerComparator;
import org.eclipse.jface.viewers.ViewerSorter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.part.ViewPart;

import com.jchapman.jipsnapman.events.ISnapshotEventListener;
import com.jchapman.jipsnapman.events.SnapshotEvent;
import com.jchapman.jipsnapman.events.SnapshotEventManager;
import com.jchapman.jipsnapman.models.ILogsModel;
import com.jchapman.jipsnapman.models.Snapshot;

import views.widgets.BasicListTable;

import actions.menu.*;
import actions.toolbar.*;

// this will need to be refactored into a proper MVC later
// chances are that will happen automatically as I attempt to mold
// the architecture of the original implementation into the plugin
public class 
JIPView 
extends ViewPart 
implements IView,
	ISnapshotEventListener
{
	String 			path;
	String 			name;
	String 			port;
	String 			host;
	
	Label 			label;
	BasicListTable 	snapshots_table;
	BasicListTable	log_console_table;
	
	public 
	JIPView() 
	{}
	
	@Override
	public void 
	createPartControl
	(Composite parent) 
	{
		
		initializeGridLayout(parent);
		initializeLabel(parent);
		
		IActionBars actionBars 	
			= super.getViewSite().getActionBars();
		SnapshotEventManager snapshot_event_manager
			= new SnapshotEventManager();
		this.initializeToolbar(actionBars.getToolBarManager(), snapshot_event_manager);
		
		this.initializeDropDownMenu(actionBars.getMenuManager());
		snapshot_event_manager.addSnapshotEventListener(this);
		
		ITableLabelProvider label_provider 
			= new ITableLabelProvider(){
				@Override
				public String
				getText
				(Object element)
				{
					System.out.println("Formatting snapshot");
					Snapshot snapshot = (Snapshot) element;
					
					return snapshot.getPath();
				}
			};
		this.snapshots_table 
			= new BasicListTable(parent, "Snapshots", label_provider);
		
		this.snapshots_table.setContents(Activator.getDefault().getModel().getSnapshotsList());
		/*
		this.snapshots_table.setContents(
			new ArrayList<Object>(Arrays.asList( 
				new String[]{ 
					"C", "C++", "Java", "smalltalk"
				})
			));*/
		
		this.log_console_table
			= new BasicListTable(parent, "Event Log", null);
	}

	private void 
	initializeGridLayout
	(Composite parent) 
	{
		GridLayout grid_layout 
			= new GridLayout(1, false);
		grid_layout.marginWidth = 4;
		parent.setLayout(grid_layout);
	}
	
	private void 
	initializeLabel
	(Composite parent) 
	{
		this.label 				
			= new Label(parent, SWT.LEFT);
		this.label.setText("Hello World");
		
		GridData grid_data 			
			= new GridData(SWT.FILL,SWT.FILL, true, false);
		grid_data.horizontalSpan 	
			= 1 ;
		this.label.setLayoutData( grid_data );
	}

	private void 
	initializeToolbar
	(IToolBarManager toolBar, SnapshotEventManager snapshot_event_manager) 
	{		
		IAction details	
			= new ConfigureAction(this, snapshot_event_manager);
		IAction finish	
			= new FinishAction(snapshot_event_manager);
		IAction start	
			= new StartAction(snapshot_event_manager);
		IAction launch	
			= new LaunchViewerAction();
		
		toolBar.add(details);
		toolBar.add(start);
		toolBar.add(finish);
		toolBar.add(launch);

	}
	
	private void 
	initializeDropDownMenu
	(IMenuManager dropDownMenu) 
	{
		IAction about		
			= new AboutAction();
		dropDownMenu.add(about);
	}
	
	@Override
	public void 
	setFocus() 
	{}
	
	public void
	refresh()
	{
		label.setText(
			this.name 
			+ "   ( Port: " 
			+ this.port 
			+ ", Host: " 
			+ this.port
			+ ", Path: "
			+ this.path 
			+ " )"
		);
		snapshots_table.refresh();
	}

	@Override
	public void 
	modelPropertyChange
	(PropertyChangeEvent evt) 
	{
		switch(evt.getPropertyName()){
		case Constants.PATH_PROPERTY:
			this.path = (String) evt.getNewValue();
			break;
		case Constants.HOST_PROPERTY:
			this.host = (String) evt.getNewValue();
			break;
		case Constants.NAME_PROPERTY:
			this.name = (String) evt.getNewValue();
			break;
		case Constants.PORT_PROPERTY:
			this.port = (String) evt.getNewValue();
			break;
		}
		this.refresh();
	}

	 /* --------------- from SnapshotEventListener --------------- */

    public void 
    handleSnapshotEvent
    (SnapshotEvent event) 
    {
        switch (event.getId()) {
            case SnapshotEvent.ID_SNAPSHOT_CAPTURED:
            	System.out.println("event.getSnapshot");
            	Activator.getDefault().getModel().addSnapshot(event.getSnapshot());
            	this.snapshots_table.refresh();
                break;
            default:
            	break;
        }
    }
	
}
