package actions;

import java.beans.PropertyChangeEvent;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import jipplugin.IController;
import jipplugin.IView;

import com.jchapman.jipsnapman.models.ISnapshotInfoModel;

public class 
ControllerDelegate 
implements IController
{
	private List<ISnapshotInfoModel>	m_registered_models;
	private List<IView> 				m_registered_views;
		
	public 
	ControllerDelegate()
	{
		m_registered_models
			= new ArrayList<ISnapshotInfoModel>();
		m_registered_views
			= new ArrayList<IView>();
	}
	
	@Override
	public void 
	propertyChange
	( PropertyChangeEvent evt ) 
	{
		for(IView view : m_registered_views){
			view.modelPropertyChange(evt);
		}
	}
	
	@Override
	public void 
	addModel
	(ISnapshotInfoModel model) 
	{
		m_registered_models.add(model);
		model.addPropertyChangeListener(this);
	}

	@Override
	public void 
	removeModel
	(ISnapshotInfoModel model) 
	{
		m_registered_models.remove(model);
		model.removePropertyChangeListener(this);
	}

	@Override
	public void 
	addView
	(IView view) 
	{
		m_registered_views.add(view);
	}

	@Override
	public void 
	removeView
	(IView view)
	{
		m_registered_views.remove(view);
	}
	
	@Override
	public void 
	setModelProperty
	(String property_name, Object new_value) 
	{
		System.out.println("ConfigureAction SetModelProperty");
		
		for ( ISnapshotInfoModel model: m_registered_models ) {
            try {
                Method method = model.getClass().
                    getMethod("set"+property_name, new Class[] {
                                                      new_value.getClass()
                                                  }
                             );
                method.invoke(model, new_value);
            } catch (Exception ex) {
            	System.err.println("No such method exception");
            	System.err.println(model.getClass().toString());
            }
        }
	}
}
