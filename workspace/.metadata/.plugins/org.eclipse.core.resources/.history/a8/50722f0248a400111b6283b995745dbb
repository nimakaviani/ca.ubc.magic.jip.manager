package actions.toolbar;

import java.beans.PropertyChangeEvent;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import jipplugin.Activator;
import jipplugin.Constants;
import jipplugin.DetailsDialog;
import jipplugin.IController;
import jipplugin.IView;
import jipplugin.JIPView;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.dialogs.InputDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.PlatformUI;

import com.jchapman.jipsnapman.models.ISnapshotInfoModel;
import com.sun.example.mvc.model.IModel;

public class ConfigureAction 
extends Action 
implements IController
{
	// this should eventually be turned into a "view" that can
	// be in the list of views to be updated
	private List<ISnapshotInfoModel>	registeredModels;
	private List<IView> 				registeredViews;
	
	private DetailsDialog 				dialog;
	
	// basically I am trying to understand the reference's technique for 
	// keeping track of the previous path and displaying it
	public 
	ConfigureAction
	( JIPView jipView )
	{
		registeredModels
			= new ArrayList<ISnapshotInfoModel>();
		registeredViews
			= new ArrayList<IView>();
		this.setToolTipText("Set the path, name, port, and host to work with.");
		this.setImageDescriptor(Activator.getImageDescriptor("icons/configure.gif"));
		
		Shell shell
			= PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		dialog 
			= new DetailsDialog(shell, this);
		
		this.addModel(Activator.getDefault().getModel());
		this.addView(jipView);
		this.addView(dialog);
	}
	
	@Override
	public void run(){
		if(dialog.open() != InputDialog.OK){
			return;
		}		
		
		//view.setSnapshotDetails("hello", "there", "you", "there");
	}
	
	public 
	void setPath
	( String path )
	{
		this.setModelProperty(Constants.PATH_PROPERTY, path);
	}

	@Override
	public void 
	setModelProperty
	(String property_name, String path) 
	{
		for ( ISnapshotInfo model: registeredModels ) {
            try {
                Method method = model.getClass().
                    getMethod("set"+propertyName, new Class[] {
                                                      newValue.getClass()
                                                  }
                             );
                method.invoke(model, newValue);
            } catch (Exception ex) {
            }
        }
	}

	@Override
	public void 
	propertyChange
	( PropertyChangeEvent evt ) 
	{
		System.out.println("ConfigureAction propertyChange");
		for(IView view : registeredViews){
			//jipplugin.Model snapshot = Activator.getDefault().getModel();
			// the main view should be updated in response to this
			// for now cheat
			view.modelPropertyChange(evt);
			/*jipView.setSnapshotDetails(
				snapshot.getSnapshotPath(), 
				snapshot.getSnapshotName(), 
				snapshot.getSnapshotPort(),
				snapshot.getSnapshotHost()
			);*/
		}
		
		
	}

	@Override
	public void 
	addModel
	(ISnapshotInfoModel model) 
	{
		registeredModels.add(model);
		model.addPropertyChangeListener(this);
	}

	@Override
	public void 
	removeModel
	(ISnapshotInfoModel model) 
	{
		registeredModels.remove(model);
		model.removePropertyChangeListener(this);
	}

	@Override
	public void 
	addView
	(IView view) 
	{
		registeredViews.add(view);
	}

	@Override
	public void 
	removeView
	(IView view)
	{
		registeredViews.remove(view);
	}
}
