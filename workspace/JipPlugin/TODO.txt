22 May 2012:

So today I got a rough draft of a working SWT MVC set up. The example centers
around the ConfigureAction as the Controller. I am doing what I can to
decouple the controller/model from the view; I am getting there, but decoupling
the controller from the model appears to be a little bit more difficult.

The next thing to do, now that the messages are being passed around, is
perform input validation on the snapshot entries, and add the message passing
which deactivates certain toolbar buttons based on the state of the system
( I believe this code is present in the reference implementation, and forms the
last part of the browse action).

After that I will more or less know enough to study the rest of the code and
port the functionality over. I should have enough time to read more into the
eclipse plugin book and see if there aren't better ways to do what I am doing.

I have a first prototype that should be able to connect to another application
set up. I want to test out that the connection happpens correctly when the start
button is pressed, and that all of the behaviour I have until now matches the
original (especially the error messages). After this I have the finish action
to implement, and then the view snapshots, and any polish necessary.

21 May 2012:

I have completed almost all of the GUI elements. Now I need to port over the system
functionality. I have copied over the models, because those I should be able to work
with wholesale. The next part is to add the connection between the GUI and the
model itself, with as little new code as possible.

Once the port is done perhaps I can refactor.

Stay calm and carry on: I will start by porting the BrowsePathAction class.

Miniature MVC for starters: setting the snapshot data:
	1) controller gets a reference to a view; this is used whenever the
	controller is notified of a change in a model
	2) controller obtains a reference to a model; this is used to change
	something when the view indicates
	3) controller registers itself as a listener on the model's state
	
In the case of the ConfigurationDialog, we have the dialog as the view;
the action as the controller, and some model as the model. I know this is
different from the design of the original implementation, but it should be
straightforward and can be carried out. Later on I will need to change to the
"command" approach.

20 May 2012:

I want to both get things done and learn new techniques. Once I have figured out
how to do something, I need to immediately look up how to do it better.

Later on I may try out the SWTXML project on Google code.

Today, since I have laid out the primary design of the user interface, I will now
refactor. I may need to refactor once more once the MVC is decided on.

One of the things I will need to learn is how to use resources, so that the 
contents and the layout of the GUI can be separated. 

